import sys  # track error details



def error_message_detail(error, error_detail: sys):
    """
    Generates a detailed error message with the file name, line number, and error description.

    Parameters
    ----------
    error : Exception
        The exception instance to extract the error message from.
    error_detail : sys
        The `sys` module used to retrieve traceback details of the exception.

    Returns
    -------
    str
        A string containing the error details, including the file name where the error occurred,
        the line number, and the error message.
"""
    _, _, exc_tb = error_detail.exc_info()  # On which file line number.. the exception has occured
    file_name = exc_tb.tb_frame.f_code.co_filename
    error_message = "Error occured in python script name [{0}] line number [{1}] error message [{2}]".format(
        file_name, exc_tb.tb_lineno, str(error)

    )
    return error_message

class CustomException(Exception):
    """
    A custom exception class that provides detailed error messages including the file name 
    and line number where the exception occurred.

    Parameters
    ----------
    error_message : str
        The original error message describing the exception.
    error_detail : sys
        The `sys` module used to extract detailed traceback information about the exception.

    Attributes
    ----------
    error_message : str
        A detailed error message generated by the `error_message_detail` function.

    Methods
    -------
    __str__()
        Returns the detailed error message.

    """
    def __init__(self, error_message, error_detail: sys):
        super().__init__(error_message)
        self.error_message = error_message_detail(error_message, error_detail=error_detail)

    def __str__(self):
        return self.error_message
    
# Checking with an example : 

if __name__ == "__main__":
    
    def divide_numbers(a, b):
        try:
            result = a / b
        except Exception as e:
            # Raise a CustomException instead of the original exception
            raise CustomException(e, sys) 

    divide_numbers(10, 0)
  
    """try:
        a = 13 / 0
        logging.info('division by zero')
    except Exception as e:
        
        raise CustomException(e, sys)"""

        